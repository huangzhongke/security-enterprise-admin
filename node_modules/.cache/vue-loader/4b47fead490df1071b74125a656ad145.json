{"remainingRequest":"E:\\frontCode\\security-enterprise-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\frontCode\\security-enterprise-admin\\src\\components\\ren-region-tree\\src\\ren-region-tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\frontCode\\security-enterprise-admin\\src\\components\\ren-region-tree\\src\\ren-region-tree.vue","mtime":1657251814288},{"path":"E:\\frontCode\\security-enterprise-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657251795729},{"path":"E:\\frontCode\\security-enterprise-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1657251794312},{"path":"E:\\frontCode\\security-enterprise-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657251795729},{"path":"E:\\frontCode\\security-enterprise-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1657251812566}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgeyB0cmVlRGF0YVRyYW5zbGF0ZSB9IGZyb20gJ0AvdXRpbHMnDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICdSZW5SZWdpb25UcmVlJywNCiAgZGF0YSAoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGZpbHRlclRleHQ6ICcnLA0KICAgICAgdmlzaWJsZVRyZWU6IGZhbHNlLA0KICAgICAgZGF0YUxpc3Q6IFtdLA0KICAgICAgc2hvd05hbWU6ICcnLA0KICAgICAgZXhwYW5kZWRLZXlzOiBudWxsLA0KICAgICAgZGVmYXVsdFByb3BzOiB7DQogICAgICAgIGNoaWxkcmVuOiAnY2hpbGRyZW4nLA0KICAgICAgICBsYWJlbDogJ25hbWUnDQogICAgICB9DQogICAgfQ0KICB9LA0KICBwcm9wczogew0KICAgIHZhbHVlOiBbTnVtYmVyLCBTdHJpbmddLA0KICAgIHBhcmVudE5hbWU6IFN0cmluZywNCiAgICBwbGFjZWhvbGRlcjogU3RyaW5nDQogIH0sDQogIHdhdGNoOiB7DQogICAgZmlsdGVyVGV4dCAodmFsKSB7DQogICAgICB0aGlzLiRyZWZzLnRyZWUuZmlsdGVyKHZhbCkNCiAgICB9LA0KICAgIHBhcmVudE5hbWUgKHZhbCkgew0KICAgICAgdGhpcy5zaG93TmFtZSA9IHZhbA0KICAgIH0NCiAgfSwNCiAgbWV0aG9kczogew0KICAgIHRyZWVEaWFsb2cgKCkgew0KICAgICAgdGhpcy5leHBhbmRlZEtleXMgPSBudWxsDQogICAgICBpZiAodGhpcy4kcmVmcy50cmVlKSB7DQogICAgICAgIHRoaXMuJHJlZnMudHJlZS5zZXRDdXJyZW50S2V5KG51bGwpDQogICAgICB9DQogICAgICB0aGlzLnZpc2libGVUcmVlID0gdHJ1ZQ0KICAgICAgdGhpcy5nZXREYXRhTGlzdCh0aGlzLnZhbHVlKQ0KICAgIH0sDQogICAgZmlsdGVyTm9kZSAodmFsdWUsIGRhdGEpIHsNCiAgICAgIGlmICghdmFsdWUpIHJldHVybiB0cnVlDQogICAgICByZXR1cm4gZGF0YS5uYW1lLmluZGV4T2YodmFsdWUpICE9PSAtMQ0KICAgIH0sDQogICAgZ2V0RGF0YUxpc3QgKGlkKSB7DQogICAgICByZXR1cm4gdGhpcy4kaHR0cC5nZXQoJy9zeXMvcmVnaW9uL3RyZWUnKS50aGVuKCh7IGRhdGE6IHJlcyB9KSA9PiB7DQogICAgICAgIGlmIChyZXMuY29kZSAhPT0gMCkgew0KICAgICAgICAgIHJldHVybiB0aGlzLiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpDQogICAgICAgIH0NCiAgICAgICAgdGhpcy5kYXRhTGlzdCA9IHRyZWVEYXRhVHJhbnNsYXRlKHJlcy5kYXRhKQ0KICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgICAgdGhpcy4kcmVmcy50cmVlLnNldEN1cnJlbnRLZXkoaWQpDQogICAgICAgICAgdGhpcy5leHBhbmRlZEtleXMgPSBbaWRdDQogICAgICAgIH0pDQogICAgICB9KS5jYXRjaCgoKSA9PiB7fSkNCiAgICB9LA0KICAgIGNhbmNlbEhhbmRsZSAoKSB7DQogICAgICB0aGlzLnZpc2libGVUcmVlID0gZmFsc2UNCiAgICAgIHRoaXMuZGF0YUxpc3QgPSBbXQ0KICAgICAgdGhpcy5maWx0ZXJUZXh0ID0gJycNCiAgICB9LA0KICAgIGNsZWFySGFuZGxlICgpIHsNCiAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgJzAnKQ0KICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOnBhcmVudE5hbWUnLCAnJykNCiAgICAgIHRoaXMuc2hvd05hbWUgPSAnJw0KICAgICAgdGhpcy52aXNpYmxlVHJlZSA9IGZhbHNlDQogICAgICB0aGlzLmRhdGFMaXN0ID0gW10NCiAgICAgIHRoaXMuZmlsdGVyVGV4dCA9ICcnDQogICAgfSwNCiAgICBjb21taXRIYW5kbGUgKCkgew0KICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuJHJlZnMudHJlZS5nZXRDdXJyZW50Tm9kZSgpDQogICAgICBpZiAoIW5vZGUpIHsNCiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcih0aGlzLiR0KCdjaG9vc2UnKSkNCiAgICAgICAgcmV0dXJuDQogICAgICB9DQogICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIG5vZGUuaWQpDQogICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6cGFyZW50TmFtZScsIG5vZGUubmFtZSkNCiAgICAgIHRoaXMuc2hvd05hbWUgPSBub2RlLm5hbWUNCiAgICAgIHRoaXMudmlzaWJsZVRyZWUgPSBmYWxzZQ0KICAgICAgdGhpcy5kYXRhTGlzdCA9IFtdDQogICAgICB0aGlzLmZpbHRlclRleHQgPSAnJw0KICAgIH0NCiAgfQ0KfQ0K"},{"version":3,"sources":["ren-region-tree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ren-region-tree.vue","sourceRoot":"src/components/ren-region-tree/src","sourcesContent":["<template>\r\n  <div class=\"ren-region\">\r\n  <el-input v-model=\"showName\" :placeholder=\"placeholder\" @focus=\"treeDialog\">\r\n    <el-button slot=\"append\" icon=\"el-icon-search\" @click=\"treeDialog\"></el-button>\r\n  </el-input>\r\n  <el-input :value=\"value\" style=\"display: none\"></el-input>\r\n  <el-dialog :visible.sync=\"visibleTree\" width=\"360px\" :modal=\"false\" :title=\"placeholder\" :close-on-click-modal=\"false\" :close-on-press-escape=\"false\">\r\n    <el-form size=\"mini\" :inline=\"true\">\r\n      <el-form-item :label=\"$t('keyword')\">\r\n        <el-input v-model=\"filterText\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button type=\"default\">{{ $t('query') }}</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n    <el-tree\r\n      class=\"filter-tree\"\r\n      :data=\"dataList\"\r\n      :default-expanded-keys=\"expandedKeys\"\r\n      :props=\"{ label: 'name', children: 'children' }\"\r\n      :expand-on-click-node=\"false\"\r\n      :filter-node-method=\"filterNode\"\r\n      :highlight-current=\"true\"\r\n      node-key=\"id\"\r\n      ref=\"tree\">\r\n    </el-tree>\r\n    <template slot=\"footer\">\r\n      <el-button type=\"default\" @click=\"cancelHandle()\" size=\"mini\">{{ $t('cancel') }}</el-button>\r\n      <el-button type=\"info\" @click=\"clearHandle()\" size=\"mini\">{{ $t('clear') }}</el-button>\r\n      <el-button type=\"primary\" @click=\"commitHandle()\" size=\"mini\">{{ $t('confirm') }}</el-button>\r\n    </template>\r\n  </el-dialog>\r\n  </div>\r\n</template>\r\n<style lang=\"scss\">\r\n.ren-region {\r\n    .filter-tree {\r\n        max-height: 230px;\r\n        overflow: auto;\r\n    }\r\n    .el-dialog__body {\r\n        padding: 0px 0px 0px 20px;\r\n    }\r\n    .el-dialog__footer {\r\n        padding: 10px 20px 8px 20px;\r\n    }\r\n}\r\n</style>\r\n<script>\r\nimport { treeDataTranslate } from '@/utils'\r\nexport default {\r\n  name: 'RenRegionTree',\r\n  data () {\r\n    return {\r\n      filterText: '',\r\n      visibleTree: false,\r\n      dataList: [],\r\n      showName: '',\r\n      expandedKeys: null,\r\n      defaultProps: {\r\n        children: 'children',\r\n        label: 'name'\r\n      }\r\n    }\r\n  },\r\n  props: {\r\n    value: [Number, String],\r\n    parentName: String,\r\n    placeholder: String\r\n  },\r\n  watch: {\r\n    filterText (val) {\r\n      this.$refs.tree.filter(val)\r\n    },\r\n    parentName (val) {\r\n      this.showName = val\r\n    }\r\n  },\r\n  methods: {\r\n    treeDialog () {\r\n      this.expandedKeys = null\r\n      if (this.$refs.tree) {\r\n        this.$refs.tree.setCurrentKey(null)\r\n      }\r\n      this.visibleTree = true\r\n      this.getDataList(this.value)\r\n    },\r\n    filterNode (value, data) {\r\n      if (!value) return true\r\n      return data.name.indexOf(value) !== -1\r\n    },\r\n    getDataList (id) {\r\n      return this.$http.get('/sys/region/tree').then(({ data: res }) => {\r\n        if (res.code !== 0) {\r\n          return this.$message.error(res.msg)\r\n        }\r\n        this.dataList = treeDataTranslate(res.data)\r\n        this.$nextTick(() => {\r\n          this.$refs.tree.setCurrentKey(id)\r\n          this.expandedKeys = [id]\r\n        })\r\n      }).catch(() => {})\r\n    },\r\n    cancelHandle () {\r\n      this.visibleTree = false\r\n      this.dataList = []\r\n      this.filterText = ''\r\n    },\r\n    clearHandle () {\r\n      this.$emit('input', '0')\r\n      this.$emit('update:parentName', '')\r\n      this.showName = ''\r\n      this.visibleTree = false\r\n      this.dataList = []\r\n      this.filterText = ''\r\n    },\r\n    commitHandle () {\r\n      const node = this.$refs.tree.getCurrentNode()\r\n      if (!node) {\r\n        this.$message.error(this.$t('choose'))\r\n        return\r\n      }\r\n      this.$emit('input', node.id)\r\n      this.$emit('update:parentName', node.name)\r\n      this.showName = node.name\r\n      this.visibleTree = false\r\n      this.dataList = []\r\n      this.filterText = ''\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}